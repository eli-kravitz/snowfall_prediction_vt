import pickleimport osimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npfrom prophet import Prophetpwd = os.getcwd()save_loc = os.path.join(pwd, 'api_data_clean')if not os.path.isdir(save_loc):    os.mkdir(save_loc)    file_name = 'Burlington.pkl'full_file = os.path.join(save_loc, file_name)# Load datawith open(full_file, 'rb') as input_file:    data_full = pickle.load(input_file)# Store timetime = pd.to_datetime(data_full['time'])# Reomve unnecessary columns from dataframedata_full = data_full.drop(columns=['time', 'days_since_Jan1_2000', 'snowfall'])# Make location to save modelspwd = os.getcwd()save_mod = os.path.join(pwd, 'TSF_data')if not os.path.isdir(save_mod):    os.mkdir(save_mod)    # Place to save figssave_plot = os.path.join(pwd, 'figs', 'TSF')if not os.path.isdir(save_plot):    os.mkdir(save_plot)# Loop through and do forecasting for ech featurefor c in data_full.columns:        # These bounds are here to hopefully use:    # model = Prophet(growth='logistic')    # BUT: this is super slow, so add constraints later on    if c == 'temperature_2m':        cap_val = 50.        floor_val = -50.    elif c == 'relativehumidity_2m':        cap_val = 100.        floor_val = 0.    elif c == 'apparent_temperature':        cap_val = 50.        floor_val = -50.    elif c == 'surface_pressure':        cap_val = 1035.        floor_val = 950.    elif c == 'shortwave_radiation':        cap_val = 1000.        floor_val = 0.    elif c == 'direct_radiation':        cap_val = 900.        floor_val = 0.    elif c == 'diffuse_radiation':        cap_val = 500.        floor_val = 0.    elif c == 'direct_normal_irradiance':        cap_val = 1020.        floor_val = 0.    elif c == 'windspeed_10m':        cap_val = 60.        floor_val = 0.    elif c == 'winddirection_10m':        cap_val = 360.        floor_val = 0.    elif c == 'et0_fao_evapotranspiration':        cap_val = 1.        floor_val = 0.    elif c == 'soil_temperature_0_to_7cm':        cap_val = 35.        floor_val = -15.    elif c == 'soil_moisture_0_to_7cm':        cap_val = 0.4        floor_val = 0.1    else:        print('Unrecognized string.')        # Make dataframe     data = pd.DataFrame({        'ds': time,        'y': data_full[c]})        # Split data into training and testing sets    train_data = data.iloc[:int(len(data)*0.8)]    test_data = data.iloc[int(len(data)*0.8):]        # Create/train model    model = Prophet()    model.fit(train_data)        # Dataframe for hourly predictions    future = model.make_future_dataframe(periods=len(test_data) * 3, freq='h')    if 'cap' in data:        future['cap'] = cap_val        future['floor'] = floor_val        # Predictions with uncertainty    forecast = model.predict(future)    samples = model.predictive_samples(future)    lower = np.quantile(samples['yhat'], 0.025, axis=1)    upper = np.quantile(samples['yhat'], 0.975, axis=1)    # Plot    plt.figure()    plt.plot(train_data['ds'], train_data['y'], label='Training Data')    plt.plot(test_data['ds'], test_data['y'], label='Testing Data')    plt.plot(forecast['ds'], forecast['yhat'], label='Predictions')    plt.fill_between(forecast['ds'], lower, upper,                      alpha=0.5, label='95% Confidence Interval')    plt.legend()    plt.grid()    plt.title(c)        # Save plot    file_name = c + '.png'    plt.savefig(os.path.join(save_plot, file_name),                 dpi=300, bbox_inches='tight')        # Save model    file_name = c + '.pkl'    full_file = os.path.join(save_mod, file_name)    with open(full_file, 'wb') as handle:        pickle.dump(model, handle, protocol=pickle.HIGHEST_PROTOCOL)