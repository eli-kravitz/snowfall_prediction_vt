'''Do time series forecasting with Facebook's Prophet package to incorporatestate uncertainty.'''import pickleimport osimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npfrom prophet import Prophetpwd = os.getcwd()save_loc = os.path.join(pwd, 'api_data_clean')if not os.path.isdir(save_loc):    os.mkdir(save_loc)    file_name = 'Burlington.pkl'full_file = os.path.join(save_loc, file_name)# Load datawith open(full_file, 'rb') as input_file:    data_full = pickle.load(input_file)# Store timetime = pd.to_datetime(data_full['time'])# Reomve unnecessary columns from dataframedata_full = data_full.drop(columns=['time', 'days_since_Jan1_2000', 'snowfall'])# Make location to save modelspwd = os.getcwd()save_mod = os.path.join(pwd, 'TSF_data')if not os.path.isdir(save_mod):    os.mkdir(save_mod)    # Place to save figssave_plot = os.path.join(pwd, 'figs', 'TSF')if not os.path.isdir(save_plot):    os.mkdir(save_plot)# Loop through and do forecasting for ech featurefor c in data_full.columns:        # Make dataframe     data = pd.DataFrame({        'ds': time,        'y': data_full[c]})        # Split data into training and testing sets    train_data = data.iloc[:int(len(data)*0.8)]    test_data = data.iloc[int(len(data)*0.8):]        # Create/train model    model = Prophet()    model.fit(train_data)        # Dataframe for hourly predictions    future = model.make_future_dataframe(periods=len(test_data) * 3, freq='h')        # Predictions with uncertainty    forecast = model.predict(future)    samples = model.predictive_samples(future)    lower = np.quantile(samples['yhat'], 0.025, axis=1)    upper = np.quantile(samples['yhat'], 0.975, axis=1)    # Plot    plt.figure()    plt.plot(train_data['ds'], train_data['y'], label='Training Data')    plt.plot(test_data['ds'], test_data['y'], label='Testing Data')    plt.plot(forecast['ds'], forecast['yhat'], label='Predictions')    plt.fill_between(forecast['ds'], lower, upper,                      alpha=0.5, label='95% Confidence Interval')    plt.legend()    plt.grid()    plt.title(c)        # Save plot    file_name = c + '.png'    plt.savefig(os.path.join(save_plot, file_name),                 dpi=300, bbox_inches='tight')        # Save model    file_name = c + '.pkl'    full_file = os.path.join(save_mod, file_name)    with open(full_file, 'wb') as handle:        pickle.dump(model, handle, protocol=pickle.HIGHEST_PROTOCOL)