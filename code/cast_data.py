'''Cast data using polynomial kernel'''import numpy as npimport matplotlib.pyplot as pltimport ospwd = os.getcwd()save_loc = os.path.join(pwd, 'figs', 'svm')if not os.path.isdir(save_loc):    os.mkdir(save_loc)# Generate 2D Gaussian datanp.random.seed(0)mean = [0, 0]cov = np.array([[1, 0], [0, 1]])X = np.random.multivariate_normal(mean, cov, 100)# Determine class labels (using a polynomial) of X and plotlabels = np.zeros(len(X), dtype=int)for (i, pt) in enumerate(X):    if pt[1] < pt[0] ** 2:        labels[i] = 0    else:        labels[i] = 1plt.figure()plt.scatter(X[:, 0], X[:, 1], c=labels)plt.xlabel('X1')plt.ylabel('X2')plt.title('Original Data')plt.grid()file_name = '2d.png'plt.savefig(os.path.join(save_loc, file_name), dpi=300, bbox_inches='tight')def polynomial_kernel(X, r, d):    X_transformed = np.zeros((X.shape[0], int(X.shape[1] * (X.shape[1] + 1) / 2)))    k = 0    for i in range(X.shape[1]):        for j in range(i, X.shape[1]):            X_transformed[:, k] = X[:, i] ** r * X[:, j] ** d            k += 1    return X_transformed# Define parametersr = 1d = 2# Get transformed dataX_transformed = polynomial_kernel(X, r, d)# Plot transformed datafig = plt.figure()ax = fig.add_subplot(projection='3d')ax.scatter(X_transformed[:, 0], X_transformed[:, 1], X_transformed[:, 2],            c=labels, alpha=1)ax.set_xlabel('X1')ax.set_ylabel('X2')ax.set_zlabel('Z')plt.grid()plt.title('Transformed Data')file_name = '3d.png'plt.savefig(os.path.join(save_loc, file_name), dpi=300, bbox_inches='tight')